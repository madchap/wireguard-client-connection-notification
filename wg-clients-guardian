#!/bin/bash
# This script is adapted from https://github.com/alfiosalanitri/wireguard-client-connection-notification

# config variables
CURRENT_PATH=$(pwd)
CLIENTS_DIRECTORY="/data/wg_clients"
NOW=$(date +%s)

if [ ! "$CLIENTS_DIRECTORY" ]; then
	mkdir -p "$CLIENTS_DIRECTORY"
fi

# after X minutes the clients will be considered disconnected
TIMEOUT=15

# check if wireguard exists
if ! command -v wg &> /dev/null; then
	printf "Sorry, but wireguard is required. Install it with before.\n"
	exit 1;
fi
WIREGUARD_CLIENTS=$(wg show wg0 dump | tail -n +2) # remove first line from list
if [ "" == "$WIREGUARD_CLIENTS" ]; then
	printf "No wireguard clients.\n"
	exit 1
fi

# check if the user type the telegram config file and that file exists
if [ ! "$1" ]; then
	printf "The config file with the webhook ID and the Home Assistant URL is required.\n"
	exit 1
fi
if [ ! -f "$1" ]; then
	printf "This config file doesn't exists\n"
	exit 1
fi
WEBHOOK_ID=$(awk -F'=' '/^webhook=/ { print $2}' $1)

while IFS= read -r LINE; do
	PUBLIC_KEY=$(awk '{ print $1 }' <<< "$LINE")
	REMOTE_IP=$(awk '{ print $3 }' <<< "$LINE" | awk -F':' '{print $1}')
	LAST_SEEN=$(awk '{ print $5 }' <<< "$LINE")
	# on the Home Assistant add-on, the keys directory may not be there, preferring a static file for my needs anyways
	# 1 field pubkey, 2 field name
	CLIENT_NAME=$(grep "$PUBLIC_KEY" /data/wg_clients.txt | awk '{print $2}')
	CLIENT_FILE="$CLIENTS_DIRECTORY/$CLIENT_NAME.txt"

	# create the client file if not exists.
	if [ ! -f "$CLIENT_FILE" ]; then
		echo "offline" > $CLIENT_FILE
	fi	

	# setup notification variable
	send_notification="no"
	  
	# last client status
	LAST_CONNECTION_STATUS=$(cat $CLIENT_FILE)
	  
	# elapsed seconds from last connection
	LAST_SEEN_SECONDS=$(date -d @"$LAST_SEEN" '+%s')
	
	# it the user is online
	if [ "$LAST_SEEN" -ne 0 ]; then

		# elaped minutes from last connection
		LAST_SEEN_ELAPSED_MINUTES=$((10#$(($NOW - $LAST_SEEN_SECONDS)) / 60))

		# if the previous state was online and the elapsed minutes are greater then TIMEOUT, the user is offline
		if [ $LAST_SEEN_ELAPSED_MINUTES -gt $TIMEOUT ] && [ "online" == $LAST_CONNECTION_STATUS ]; then
			echo "offline" > $CLIENT_FILE
			send_notification="disconnected"
			# if the previous state was offline and the elapsed minutes are lower then timout, the user is online
		elif [ $LAST_SEEN_ELAPSED_MINUTES -le $TIMEOUT ] && [ "offline" == $LAST_CONNECTION_STATUS ]; then
			echo "online" > $CLIENT_FILE
			send_notification="connected"
		fi
	else
		# if the user is offline
		if [ "offline" != "$LAST_CONNECTION_STATUS" ]; then
			echo "offline" > $CLIENT_FILE
			send_notification="disconnected"
		fi
	fi

	# send notification
	if [ "no" != "$send_notification" ]; then
		printf "The client %s is %s\n" $CLIENT_NAME $send_notification
		MESSAGE="üêâ Wireguard: \`$CLIENT_NAME is $send_notification from $REMOTE_IP\`"
        curl -X POST "${HA_URL}/api/webhook/62e1eafc-288f-4ba5-bab3-14f73f9977a0 -d {\"client\": \"${CLIENT_NAME}\", \"ip\": \"${REMOTE_IP}\"}
	else
		printf "The client %s is %s, no notification will be send.\n" $CLIENT_NAME $(cat $CLIENT_FILE)"
	fi

done <<< "$WIREGUARD_CLIENTS"

exit 0
